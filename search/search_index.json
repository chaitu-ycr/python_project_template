{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"python_project_template A template repository for Python \ud83d\udc0d projects. This template includes a recommended project structure, automated testing, and documentation generation using MkDocs . Features Standard Python project layout Automated virtual environment setup Build scripts for wheel packaging Integrated unit testing with pytest and coverage reporting Documentation generation with MkDocs Getting Started 1. Set up the environment Create and activate a virtual environment, and install dependencies: scripts/venv_setup.bat 2. Build the wheel package Generate a distributable .whl file: scripts/build_wheel_package.bat 3. Run tests Execute all test cases and generate a coverage report: scripts/run_pytests_with_report.bat Test results and coverage reports will be available in the tests/report/ directory. Documentation Documentation is written in Markdown and built using MkDocs. To build and serve the documentation locally: mkdocs serve The documentation will be available at http://localhost:8000 . Project Structure src/ python_project_template/ app.py __init__.py tests/ test_my_package.py scripts/ venv_setup.bat build_wheel_package.bat run_pytests_with_report.bat deploy_docs_to_github.bat docs/ index.md reference_manual.md","title":"Overview"},{"location":"#python_project_template","text":"A template repository for Python \ud83d\udc0d projects. This template includes a recommended project structure, automated testing, and documentation generation using MkDocs .","title":"python_project_template"},{"location":"#features","text":"Standard Python project layout Automated virtual environment setup Build scripts for wheel packaging Integrated unit testing with pytest and coverage reporting Documentation generation with MkDocs","title":"Features"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#1-set-up-the-environment","text":"Create and activate a virtual environment, and install dependencies: scripts/venv_setup.bat","title":"1. Set up the environment"},{"location":"#2-build-the-wheel-package","text":"Generate a distributable .whl file: scripts/build_wheel_package.bat","title":"2. Build the wheel package"},{"location":"#3-run-tests","text":"Execute all test cases and generate a coverage report: scripts/run_pytests_with_report.bat Test results and coverage reports will be available in the tests/report/ directory.","title":"3. Run tests"},{"location":"#documentation","text":"Documentation is written in Markdown and built using MkDocs. To build and serve the documentation locally: mkdocs serve The documentation will be available at http://localhost:8000 .","title":"Documentation"},{"location":"#project-structure","text":"src/ python_project_template/ app.py __init__.py tests/ test_my_package.py scripts/ venv_setup.bat build_wheel_package.bat run_pytests_with_report.bat deploy_docs_to_github.bat docs/ index.md reference_manual.md","title":"Project Structure"},{"location":"src_manual/","text":"AdvancedApp ( name ) Bases: App AdvancedApp extends App to demonstrate inheritance and polymorphism. Inherits from App Overrides run: Demonstrates polymorphism by providing a different implementation. run () Run the advanced application with enhanced features. Demonstrates polymorphism by overriding the base class method. App ( name ) The App class demonstrates the four fundamental Object-Oriented Programming (OOP) concepts: Encapsulation : Bundling data (attributes) and methods that operate on that data within a single unit (class). Abstraction : Providing a simple interface and hiding complex implementation details from the user. Inheritance : Allowing a class to inherit properties and methods from another class. Polymorphism : Enabling different classes to be treated as instances of the same class through a common interface. Attributes: _name ( str ) \u2013 The name of the application (encapsulated). Initialize the App instance with a name. Demonstrates encapsulation by keeping the attribute private. Parameters: name ( str ) \u2013 The name of the application. get_name () Get the name of the application. Returns: str ( str ) \u2013 The encapsulated name of the application. run () Run the application. Demonstrates abstraction: the user interacts with a simple interface without needing to know the internal details.","title":"src_manual"},{"location":"src_manual/#src.python_project_template.app.AdvancedApp","text":"Bases: App AdvancedApp extends App to demonstrate inheritance and polymorphism. Inherits from App Overrides run: Demonstrates polymorphism by providing a different implementation.","title":"AdvancedApp"},{"location":"src_manual/#src.python_project_template.app.AdvancedApp.run","text":"Run the advanced application with enhanced features. Demonstrates polymorphism by overriding the base class method.","title":"run"},{"location":"src_manual/#src.python_project_template.app.App","text":"The App class demonstrates the four fundamental Object-Oriented Programming (OOP) concepts: Encapsulation : Bundling data (attributes) and methods that operate on that data within a single unit (class). Abstraction : Providing a simple interface and hiding complex implementation details from the user. Inheritance : Allowing a class to inherit properties and methods from another class. Polymorphism : Enabling different classes to be treated as instances of the same class through a common interface. Attributes: _name ( str ) \u2013 The name of the application (encapsulated). Initialize the App instance with a name. Demonstrates encapsulation by keeping the attribute private. Parameters: name ( str ) \u2013 The name of the application.","title":"App"},{"location":"src_manual/#src.python_project_template.app.App.get_name","text":"Get the name of the application. Returns: str ( str ) \u2013 The encapsulated name of the application.","title":"get_name"},{"location":"src_manual/#src.python_project_template.app.App.run","text":"Run the application. Demonstrates abstraction: the user interacts with a simple interface without needing to know the internal details.","title":"run"}]}